import { camelCase, startCase } from 'lodash-es'
import { createWriteStream, mkdirSync, readdirSync, readFileSync } from 'node:fs'
import { extname, join, resolve } from 'node:path'

const basePath = resolve(process.cwd(), '../')
const sourcePath = join(basePath, 'content/cms')
const outputPath = join(basePath, 'src/generated/model')

const getFilePathList = (locale: string, collection: string): Array<string> => {
  const dirPath = join(sourcePath, collection, locale)
  const entryList = readdirSync(dirPath, { withFileTypes: true })

  return entryList
    .filter((entry) => entry.isFile() && extname(entry.name) === '.json')
    .map((entry) => join(dirPath, entry.name))
}

const getFileId = (filePath: string): string => {
  const { id } = JSON.parse(readFileSync(filePath).toString())
  return id
}

const writeEnum = (idList: Array<string>, enumName: string) => {
  const outputDirPath = join(outputPath, enumName)
  const stream = createWriteStream(join(outputDirPath, `${enumName}.ts`))

  mkdirSync(outputDirPath, { recursive: true })
  stream.once('open', () => {
    stream.write(`// NOTE: This file was autogenerated by a script\n`)
    stream.write(`export enum _${enumName} {\n`)
    idList.forEach((id) => {
      const name = startCase(camelCase(id)).replace(/ /g, '')
      stream.write(`  ${name} = '${id}',\n`)
    })
    stream.write(`}\n`)
    stream.end()
  })
}

const writeEnumFromContent = (locale: string, collection: string, enumName: string) => {
  const filePathList = getFilePathList(locale, collection)
  const idList = filePathList.map((filePath): string => getFileId(filePath))

  writeEnum(idList, enumName)
}

writeEnumFromContent('de', 'scene', 'GameSceneId')
